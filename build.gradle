import groovyx.net.http.HTTPBuilder

import static groovyx.net.http.ContentType.JSON
import static groovyx.net.http.Method.GET
import static groovyx.net.http.Method.POST

buildscript {
    repositories {
        mavenRepo(url: 'http://dl.bintray.com/content/bintray/jcenter')
    }
    dependencies {
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.6'
        classpath 'commons-collections:commons-collections:3.2.1'
    }
}

apply from: 'https://repository-javafx-gradle-plugin.forge.cloudbees.com/snapshot/javafx.plugin'
apply plugin: 'java'
apply plugin: 'maven'

group = 'org.scenic-view'
version = '8.0-dp3'

repositories {
    mavenLocal()
}

configurations {
    jdk
}

dependencies {
    jdk files("${System.properties['java.home']}/../lib/tools.jar")
    compile "org.fxconnector:fxconnector:$version"
}

sourceSets {
    main {
        java {
            srcDir 'src'
            include '**/*.java'
            exclude 'deploy/**'
        }
        resources {
            srcDir 'src'
            exclude '**/*.java'
            exclude 'deploy/**'
        }
        compileClasspath += configurations.jdk
    }
}

jar {
    manifest {
        attributes(
            'Main-Class': 'org.scenicview.utils.ScenicViewBooter',
            'Premain-Class': 'org.scenicview.utils.SVInstrumentationAgent'
        )
    }
}

javafx {

    appID 'org.scenic-view'
    appName "Scenic View $version"
    mainClass 'org.scenicview.utils.ScenicViewBooter'

    // deplpy/info attributes
    category = 'public.app-category.developer-tools'
    copyright = 'Copyright (c) 2013 Jonathan Giles'
    description = 'Scenic View is a JavaFX application designed to make it simple to understand the current state of your application scenegraph, and to also easily manipulate properties of the scenegraph without having to keep editing your code. This lets you find bugs, and get things pixel perfect without having to do the compile-check-compile dance.'
    licenseType = '3 clause BSD'
    vendor = 'Jonathan Giles'

    // deploy/preferences attributes
    installSystemWide = true
    menu = true
    shortcut = true

    // app icons
    icons {
        shortcut = ['fxexperience-32.png', 'fxexperience-64.png', 'fxexperience-128.png']
        volume = 'fxexperience-32.png'
        setup = 'fxexperience-32.png'
    }
}

jfxDeploy {
    doFirst {
        copy {
            from configurations.jdk
            into project.libsDir
        }
    }
}

task createBintrayPackage << {
    def http = getHttpBuilder()
    http.request(GET, JSON) {
        uri.path = '/packages/' + bintray_orgname + '/' + bintray_repo + '/' + bintray_package
        response.'404' = {
            http = getHttpBuilder()
            http.request(POST, JSON) {
                uri.path = '/packages/' + bintray_orgname + '/' + bintray_repo
                body = [name: bintray_package, desc: 'auto', desc_url: 'auto', labels: ['JavaFX']]

                response.success = { resp ->
                    println 'Created!!!'
                }
            }
        }
    }
}

uploadArchives() {
    repositories {
        ivy {
            url = bintray_api_base_url + '/content/' + bintray_orgname + '/' + bintray_repo + '/' + bintray_package + '/' + version
            credentials {
                username bintray_username
                password bintray_api_key
            }
        }
    }
}

uploadArchives.dependsOn createBintrayPackage

def getHttpBuilder() {
    def http = new HTTPBuilder(bintray_api_base_url)
    http.auth.basic bintray_username, bintray_api_key
    return http
}